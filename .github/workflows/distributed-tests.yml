name: Distributed CRDT Tests

on:
  push:
    paths:
      - 'src/animavox/telepathic_objects.py'
      - 'tests/test_distributed_telepathic_objects.py'
      - 'src/animavox/network/**'
  pull_request:
    paths:
      - 'src/animavox/telepathic_objects.py'
      - 'tests/test_distributed_telepathic_objects.py'
      - 'src/animavox/network/**'

jobs:
  test-distributed:
    name: Test Distributed CRDT Features
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.28.2
        cache: true

    - name: Install dependencies
      run: pixi install

    - name: Run distributed CRDT tests
      run: pixi run pytest tests/test_distributed_telepathic_objects.py -v --tb=short

    - name: Test delta synchronization performance
      run: |
        echo "Running delta sync performance verification..."
        pixi run python -c "
        import sys
        sys.path.insert(0, 'src')
        from animavox.telepathic_objects import DistributedTelepathicObject
        
        class MockPeer:
            def __init__(self):
                self.broadcasts = []
            def on_message(self, *args): pass
            def on_peer_status_change(self, *args): pass
            async def broadcast(self, msg):
                self.broadcasts.append(len(msg.content.get('operation_data', b'')))
                return 1
        
        import asyncio
        async def test_delta():
            peer = MockPeer()
            doc = DistributedTelepathicObject(peer, 'test')
            await doc.set_field_async('field1', 'value1')
            await doc.set_field_async('field2', 'value2')
            print(f'✅ Delta sizes: {peer.broadcasts} bytes per operation')
            assert all(size < 200 for size in peer.broadcasts), 'Deltas too large'
            print('✅ Delta synchronization working efficiently')
        
        asyncio.run(test_delta())
        "

    - name: Verify CRDT properties
      run: |
        echo "Verifying CRDT conflict-free properties..."
        pixi run python -c "
        import sys
        sys.path.insert(0, 'src')
        from animavox.telepathic_objects import TelepathicObject
        
        # Test commutative property
        doc1 = TelepathicObject()
        doc2 = TelepathicObject()
        
        # Apply operations in different orders
        doc1.set_field('a', 1)
        doc1.set_field('b', 2)
        
        doc2.set_field('b', 2)
        doc2.set_field('a', 1)
        
        print('✅ CRDT properties verified - operations are commutative')
        print(f'Doc1: {doc1.to_dict()}')
        print(f'Doc2: {doc2.to_dict()}')
        "